// SPDX-FileCopyrightText: 2025 sirinsidiator
//
// SPDX-License-Identifier: GPL-3.0-or-later

// from https://github.com/ionic-svelte/core/issues/114
import { readFileSync, writeFileSync } from 'node:fs';
import { join } from 'node:path';

import { format } from 'prettier';

const projectRootDir = [import.meta.dirname, `..`];
const srcPath = join(...projectRootDir, `src`);
const filepath = `ionic-svelte.d.ts`;
const ionicSvelteFile = join(...projectRootDir, `node_modules`, `ionic-svelte`, `index.d.ts`);
// eslint-disable-next-line regexp/match-any
const RxMatchType = /(?<=namespace JSX)[\S\s]*?interface IntrinsicElements[\S\s]*?({([\S\s])*?})/;
const res = RxMatchType.exec(
    readFileSync(
        join(
            ...projectRootDir,
            `node_modules`,
            `@ionic`,
            `core`,
            `dist`,
            `types`,
            `components.d.ts`
        ),
        `utf8`
    )
);
const script = `
	\t/** THIS PORTION OF THE FILE IS AUTOGENERATED BY scripts/ionicComponentTypesToSvelte.js. DO NOT EDIT. */
	${(res?.at(1)?.trim().slice(1, -1) ?? ``)
        .trim()
        .split(`\n`)
        .map((line) => {
            const element = line.trim().split(`:`)[0];
            return `${element}: CommonAttributes & CorrectedAttributes<IonicJSX.IntrinsicElements[${element.replaceAll(
                `"`,
                `\``
            )}]>`;
        })
        .join(`;`)}
	\t/** END AUTOGENERATED CONTENT. */
`;

try {
    writeFileSync(
        join(srcPath, filepath),
        await format(
            `${readFileSync(join(srcPath, filepath))}`.replace(
                // eslint-disable-next-line regexp/match-any
                /export interface SvelteHTMLElements[\S\s]*?{[\S\s]*?}/,
                `export interface SvelteHTMLElements extends IonicJSX.IntrinsicElements {${script}}`
            ),
            { filepath }
        )
    );

    // eslint-disable-next-line no-console
    console.log(`Wrote ionic-svelte.d.ts file.`);

    // remove declare global { namespace svelteHTML } from ionic-svelte.d.ts
    writeFileSync(
        ionicSvelteFile,
        `${readFileSync(ionicSvelteFile, `utf8`)
            .toString()
            .replace(/declare global {[\s\S]*?namespace svelteHTML {[\s\S]*?}\s*}\s*}/, ``)}`
    );
} catch (e) {
    // eslint-disable-next-line no-console
    console.error(`Failed to write ionic - ionic-svelte.d.ts file.`, e);
}
